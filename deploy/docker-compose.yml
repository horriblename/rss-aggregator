services:
  rss-aggre:
    image: "horriblename/rss-aggre:latest"
    depends_on:
      db:
        condition: service_healthy
        required: true
      goose-migration:
        condition: service_completed_successfully
        required: true
    restart: always
    ports:
      - "443:443"
    environment:
      DATABASE_URL: "user=rss-aggre host=db port=5432 sslmode=disable"

      # added specifically for docker images
      DATABASE_PASSWORD_FILE: "/run/secrets/db_password"
    networks:
      - rss-aggre-network
    secrets:
      - db_password

  # Runs migration once and exits
  goose-migration:
    image: "horriblename/goose:latest"
    depends_on:
      db:
        condition: service_healthy
        required: true
    restart: "no"
    environment:
      DATABASE_HOST: db
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_USER: rss-aggre
    volumes:
      - ../sql/schema:/schema
      - ./update_schema.sh:/usr/local/bin/docker_entrypoint.sh
    entrypoint: /usr/local/bin/docker_entrypoint.sh
    secrets:
      - db_password
    networks:
      - rss-aggre-network

  db:
    image: "postgres:15.4-alpine3.18"
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_USER: rss-aggre
      PG_DATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - db_data:/var/lib/postgresql/data
    secrets:
      - db_password
    networks:
      - rss-aggre-network

    healthcheck:
      test: ["CMD", "pg_isready", "-U", "rss-aggre"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 2m
      start_interval: 5s

secrets:
  db_password:
    file: ./db_password.txt

networks:
  rss-aggre-network:

volumes:
  db_data:
    external:
      name: ${DATABASE_VOLUME}
