// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    id,
    created_at,
    updated_at,
    title,
    url,
    description,
    published_at,
    feed_id,
	guid,
    media_id,
    source_url,
    source_name
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, created_at, updated_at, title, url, description, published_at, feed_id, guid, media_id, source_url, source_name
`

type CreatePostParams struct {
	ID          uuid.UUID      `json:"id"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	Title       string         `json:"title"`
	Url         string         `json:"url"`
	Description sql.NullString `json:"description"`
	PublishedAt time.Time      `json:"published_at"`
	FeedID      uuid.UUID      `json:"feed_id"`
	Guid        sql.NullString `json:"guid"`
	MediaID     uuid.NullUUID  `json:"media_id"`
	SourceUrl   sql.NullString `json:"source_url"`
	SourceName  sql.NullString `json:"source_name"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
		arg.Guid,
		arg.MediaID,
		arg.SourceUrl,
		arg.SourceName,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
		&i.Guid,
		&i.MediaID,
		&i.SourceUrl,
		&i.SourceName,
	)
	return i, err
}

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT
    p.id,
    p.title,
    p.url,
    p.description,
    p.published_at,
    p.feed_id,
	p.guid,
    m.url AS media_url,
    m.length_ AS media_length,
    m.mimetype AS media_type,
    COALESCE(p.source_url, f.url) AS source_url,
	COALESCE(p.source_name, f.name) AS source_name
FROM posts AS p
LEFT JOIN feed_follows AS ff
    ON p.feed_id = ff.feed_id
LEFT JOIN media AS m
    ON p.media_id = m.id
LEFT JOIN feeds AS f
    ON p.feed_id = f.id
WHERE ff.user_id = $1
ORDER BY p.published_at DESC
LIMIT $2
`

type GetPostsByUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
}

type GetPostsByUserRow struct {
	ID          uuid.UUID      `json:"id"`
	Title       string         `json:"title"`
	Url         string         `json:"url"`
	Description sql.NullString `json:"description"`
	PublishedAt time.Time      `json:"published_at"`
	FeedID      uuid.UUID      `json:"feed_id"`
	Guid        sql.NullString `json:"guid"`
	MediaUrl    sql.NullString `json:"media_url"`
	MediaLength sql.NullInt32  `json:"media_length"`
	MediaType   sql.NullString `json:"media_type"`
	SourceUrl   string         `json:"source_url"`
	SourceName  string         `json:"source_name"`
}

func (q *Queries) GetPostsByUser(ctx context.Context, arg GetPostsByUserParams) ([]GetPostsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUserRow
	for rows.Next() {
		var i GetPostsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.Guid,
			&i.MediaUrl,
			&i.MediaLength,
			&i.MediaType,
			&i.SourceUrl,
			&i.SourceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
