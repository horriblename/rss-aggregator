// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: revokedTokens.sql

package database

import (
	"context"
	"time"
)

const revokeToken = `-- name: RevokeToken :exec
INSERT INTO revokedTokens (token, expiresAt)
VALUES ( $1, $2 )
`

type RevokeTokenParams struct {
	Token     string    `json:"token"`
	Expiresat time.Time `json:"expiresat"`
}

func (q *Queries) RevokeToken(ctx context.Context, arg RevokeTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeToken, arg.Token, arg.Expiresat)
	return err
}

const tokenIsRevoked = `-- name: TokenIsRevoked :one
SELECT COUNT(1)
FROM revokedTokens rt
WHERE rt.token = $1
`

// returns 1 if token was revoked, 0 if it is valid
func (q *Queries) TokenIsRevoked(ctx context.Context, token string) (int64, error) {
	row := q.db.QueryRowContext(ctx, tokenIsRevoked, token)
	var count int64
	err := row.Scan(&count)
	return count, err
}
