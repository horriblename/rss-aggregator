// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, name, passwordHash)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, name, apikey, passwordhash
`

type CreateUserParams struct {
	ID           uuid.UUID `json:"id"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	Name         string    `json:"name"`
	Passwordhash []byte    `json:"passwordhash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Passwordhash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Apikey,
		&i.Passwordhash,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, name, apikey, passwordhash
FROM users
WHERE apikey = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, apikey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, apikey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Apikey,
		&i.Passwordhash,
	)
	return i, err
}

const getUserFromName = `-- name: GetUserFromName :one
SELECT id, created_at, updated_at, name, apikey, passwordhash
FROM users
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetUserFromName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Apikey,
		&i.Passwordhash,
	)
	return i, err
}
